start ->
	- import: string, js_pre, ws, comment
	- when: /lexer(?![a-zA-Z\d_])/ type: "K_LEXER" goto: lexer_pre
	- when: /grammar(?![a-zA-Z\d_])/ type: "K_GRAMMAR" goto: grammar_pre
	- when: /config(?![a-zA-Z\d_])/ type: "K_CONFIG" goto: config_pre
	- import: k_config, k_import, k_head, k_body, kv
config_pre ->
	- import: ws
	- when: "{{" type: "L_TEMPLATEL"
config ->
	- import: comment, kv
	- when: "}}" type: "L_TEMPLATER" pop: 1
grammar_pre ->
	- import: ws
	- when: "{{" type: "L_TEMPLATEL"
grammar ->
	- import: comment, js_pre, js_templatepre, ws, regex, charclass, l_ebnf_0, l_ebnf_1n, l_ebnf_0n, kv, l_colon, l_comma, l_pipe, l_parenl, l_parenr, l_arrow, l_dsign, l_dash
	- when: "}}" type: "L_TEMPLATER" pop: 1
lexer_pre ->
	- import: ws
	- when: "{{" type: "L_TEMPLATEL"
lexer ->
	- import: ws, kv, regex, l_comma, l_arrow, l_dash, comment, js_pre
	- when: "}}" type: "L_TEMPLATER" pop: 1
js_pre ->
	- when: "${" type: "L_JSL" goto: js_wrap
js_wrap ->
	default: "T_JSBODY"
	unmatched: "T_JSBODY"
	- import: jsignore
	- when: "{" type: "T_JSBODY" goto: js
	- when: "}" type: "L_JSR" pop: 1
js ->
	default: "T_JSBODY"
	unmatched: "T_JSBODY"
	- import: jsignore
	- when: "{" type: "T_JSBODY" goto: js
	- when: "}" type: "T_JSBODY" pop: 1
js_templatepre ->
	- when: "{{" type: "L_TEMPLATEL" goto: js_templatewrap
js_templatewrap ->
	default: "T_JSBODY"
	unmatched: "T_JSBODY"
	- import: jsignore
	- when: "{" type: "T_JSBODY" goto: js
	- when: "}}" type: "L_TEMPLATER" pop: 1
kv ->
	- import: string, ws, word, l_colon, integer
jsignore ->
	- when: /"(?:[^"\\]|\\.)*"/ type: "T_JSBODY"
	- when: /'(?:[^'\\]|\\.)*'/ type: "T_JSBODY"
	- when: /`(?:[^`\\]|\\.)*`/ type: "T_JSBODY"
	- when: /\/(?:[^\/\\]|\\.)+\/[gmiyu]*/ type: "T_JSBODY"
	- when: /\/\/[\n]*/ type: "T_JSBODY"
	- when: /\/\*.*\*\// type: "T_JSBODY"
string ->
	- when: /"(?:[^"\\]|\\.)*"/ type: "T_STRING"
string2 ->
	- when: /'(?:[^'\\]|\\.)*'/ type: "T_STRING"
string3 ->
	- when: /`(?:[^`\\]|\\.)*`/ type: "T_STRING"
charclass ->
	- when: /\[(?:[^\]\\]|\\.)+\]/ type: "T_CHARCLASS"
regex ->
	- when: /\/(?:[^\/\\]|\\.)+\/[gmiyu]*/ type: "T_REGEX"
integer ->
	- when: /\d+/ type: "integer"
word ->
	- when: /[a-zA-Z_][a-zA-Z_\d]*/ type: "T_WORD"
ws ->
	- when: /\s+/ type: "T_WS"
k_all ->
	- when: /all(?![a-zA-Z\d_])/ type: "K_ALL"
k_tag ->
	- when: /tag(?![a-zA-Z\d_])/ type: "K_TAG"
k_type ->
	- when: /type(?![a-zA-Z\d_])/ type: "K_TYPE"
k_when ->
	- when: /when(?![a-zA-Z\d_])/ type: "K_WHEN"
k_pop ->
	- when: /pop(?![a-zA-Z\d_])/ type: "K_POP"
k_inset ->
	- when: /inset(?![a-zA-Z\d_])/ type: "K_INSET"
k_set ->
	- when: /set(?![a-zA-Z\d_])/ type: "K_SET"
k_goto ->
	- when: /goto(?![a-zA-Z\d_])/ type: "K_GOTO"
k_config ->
	- when: /config(?![a-zA-Z\d_])/ type: "K_CONFIG"
k_lexer ->
	- when: /lexer(?![a-zA-Z\d_])/ type: "K_LEXER"
k_grammar ->
	- when: /grammar(?![a-zA-Z\d_])/ type: "K_GRAMMAR"
k_import ->
	- when: /import(?![a-zA-Z\d_])/ type: "K_IMPORT"
k_body ->
	- when: /body(?![a-zA-Z\d_])/ type: "K_BODY"
k_head ->
	- when: /head(?![a-zA-Z\d_])/ type: "K_HEAD"
l_colon ->
	- when: ":" type: "L_COLON"
l_ebnf_0 ->
	- when: ":?" type: "L_EBNF_0"
l_ebnf_1n ->
	- when: ":+" type: "L_EBNF_1N"
l_ebnf_0n ->
	- when: ":*" type: "L_EBNF_0N"
l_comma ->
	- when: "," type: "L_COMMA"
l_pipe ->
	- when: "|" type: "L_PIPE"
l_parenl ->
	- when: "(" type: "L_PARENL"
l_parenr ->
	- when: ")" type: "L_PARENR"
l_templatel ->
	- when: "{{" type: "L_TEMPLATEL"
l_templater ->
	- when: "}}" type: "L_TEMPLATER"
l_arrow ->
	- when: "->" type: "L_ARROW"
l_dsign ->
	- when: "$" type: "L_DSIGN"
l_dash ->
	- when: "-" type: "L_DASH"
comment ->
	- when: /\/\/[\n]*/ type: "T_COMMENT"
commentmulti ->
	- when: /\/\*.*\*\// type: "T_COMMENT"
