lexer {

	[string]
		- import singleQuoteString, doubleQuoteString

	[doubleQuoteString]
		- when /"/ tag "dquote" highlight "string" goto doubleQuoteStringEnd

	[singleQuoteString]
		- when /'/ tag "squote" highlight "string" goto singleQuoteStringEnd

	[doubleQuoteStringEnd]
		- when /\\[\\\/bnrft]/ tag "escaped" highlight "constant"
		- when /\\"/ tag "quoteEscape"
		- when /\\u[A-Fa-f\d]{4}/ tag "escaped" highlight "constant"
		- when /\\./ tag "badEscape"
		- when /[^"\\]+/ tag "string" highlight "string"
		- when "\"" tag "dquote" highlight "string" pop

	[singleQuoteStringEnd]
		- when /\\[\\\/bnrft]/ tag "escaped"
		- when /\\'/ tag "quoteEscape"
		- when /\\u[A-Fa-f\d]{4}/ tag "escaped"
		- when /\\./ tag "badEscape"
		- when /[^'\\]+/ tag "string" highlight "string"
		- when "'" tag "squote" highlight "string" pop

}

grammar {

	[string] => ( $0 )
		| singleQuoteString
		| doubleQuoteString

	[doubleQuoteString]
		| <dquote> stringInner <dquote> => ( $1 )
		| <dquote> <dquote> => ( '' )

	[singleQuoteString]
		| <squote> stringInner <squote> => ( $1 )
		| <squote> <squote> => ( '' )

	[stringInner]
		| stringEscape => ( $0 )
		| <string> => ( $0.value )
		| stringInner stringEscape => ( $0 + $1 )
		| stringInner <string> => ( $0 + $1.value )

	[stringEscape]
		| <escaped> => ( JSON.parse('"' + $0.value + '"') )
		| <quoteEscape> => ( $0.value[1] )

}
