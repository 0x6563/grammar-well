{"json":"import * from whitespace;\n\nlexer {\n\tstart: \"json\"\n\n\t[json]\n\t\t- import whitespace\n\t\t- when /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\\b/ tag \"number\"\n\t\t- when /\"(?:\\\\[\"bfnrt\\/\\\\]|\\\\u[a-fA-F0-9]{4}|[^\"\\\\])*\"/ tag \"string\"\n\t\t- when \"{\" tag \"{\"\n\t\t- when \"}\" tag \"}\"\n\t\t- when \"[\" tag \"[\"\n\t\t- when \"]\" tag \"]\"\n\t\t- when \",\" tag \",\"\n\t\t- when \":\" tag \":\"\n\t\t- when \"true\" tag \"true\"\n\t\t- when \"false\" tag \"false\"\n\t\t- when \"null\" tag \"null\"\n\n}\n\ngrammar {\n\n\t[json]\n\t\t| _ (object | array) _ => ( $1[0] )\n\n\t[object]\n\t\t| \"{\" _ \"}\" => ( {} )\n\t\t| \"{\" _ pair (_ \",\" _ pair)* _ \"}\" => ${ extractObject }\n\n\t[array]\n\t\t| \"[\" _ \"]\" => ( [] )\n\t\t| \"[\" _ value (_ \",\" _ value)* _ \"]\" => ${ extractArray }\n\n\t[value]\n\t\t| object => ( $0 )\n\t\t| array => ( $0 )\n\t\t| number => ( $0 )\n\t\t| string => ( $0 )\n\t\t| \"true\" => ( true )\n\t\t| \"false\" => ( false )\n\t\t| \"null\" => ( null )\n\n\t[number]\n\t\t| $number => ( parseFloat($0.value) )\n\n\t[string]\n\t\t| $string => ( JSON.parse($0.value) )\n\n\t[pair]\n\t\t| key _ \":\" _ value => ( [$k, $v] )\n\n\t[key]\n\t\t| string => ( $0 )\n\n}\n\nhead {\nfunction extractPair(kv, output) {\n        if(kv[0]) { output[kv[0]] = kv[1]; }\n    }\n\n    function extractObject({data}) {\n        let output = {};\n\n        extractPair(data[2], output);\n\n        for (let i in data[3]) {\n            extractPair(data[3][i][3], output);\n        }\n\n        return output;\n    }\n\n    function extractArray({data}) {\n        let output = [data[2]];\n\n        for (let i in data[3]) {\n            output.push(data[3][i][3]);\n        }\n\n        return output;\n    }\n}\n","number":"grammar {\n\n\t[unsigned_int]\n\t\t| /[0-9]/+ => ( parseInt($0.join(\"\")) )\n\n\t[int]\n\t\t| (\"-\" | \"+\")? /[0-9]/+ => ( $0 ? parseInt($0[0]+$1.join(\"\")) : parseInt($1.join(\"\")) )\n\n\t[unsigned_decimal]\n\t\t| /[0-9]/+ (\".\" /[0-9]/+)? => ( parseFloat($0.join(\"\") + ($1 ? \".\"+$1[1].join(\"\") : \"\")) )\n\n\t[decimal]\n\t\t| \"-\"? /[0-9]/+ (\".\" /[0-9]/+)? => ( parseFloat( ($0 || \"\") + $1.join(\"\") +($2 ? \".\"+$2[1].join(\"\") : \"\")) )\n\n\t[percentage]\n\t\t| decimal \"%\" => ( $0/100 )\n\n\t[jsonfloat]\n\t\t| \"-\"? /[0-9]/+ (\".\" /[0-9]/+)? (/[eE]/ /[+-]/? /[0-9]/+)? => ( parseFloat( ($0 || \"\") + $1.join(\"\") + ($2 ? \".\"+$2[1].join(\"\") : \"\") + ($3 ? \"e\" + ($3[1] || \"+\") + $3[2].join(\"\") : \"\")) )\n\n}\n","string":"lexer {\n\n\t[string]\n\t\t- import singleQuoteString, doubleQuoteString\n\n\t[doubleQuoteString]\n\t\t- when /\"/ tag \"dquote\" highlight \"string\" goto doubleQuoteStringEnd\n\n\t[singleQuoteString]\n\t\t- when /'/ tag \"squote\" highlight \"string\" goto singleQuoteStringEnd\n\n\t[doubleQuoteStringEnd]\n\t\t- when /\\\\[\\\\\\/bnrft]/ tag \"escaped\" highlight \"constant\"\n\t\t- when /\\\\\"/ tag \"quoteEscape\"\n\t\t- when /\\\\u[A-Fa-f\\d]{4}/ tag \"escaped\" highlight \"constant\"\n\t\t- when /\\\\./ tag \"badEscape\"\n\t\t- when /[^\"\\\\]+/ tag \"string\" highlight \"string\"\n\t\t- when \"\\\"\" tag \"dquote\" highlight \"string\" pop\n\n\t[singleQuoteStringEnd]\n\t\t- when /\\\\[\\\\\\/bnrft]/ tag \"escaped\"\n\t\t- when /\\\\'/ tag \"quoteEscape\"\n\t\t- when /\\\\u[A-Fa-f\\d]{4}/ tag \"escaped\"\n\t\t- when /\\\\./ tag \"badEscape\"\n\t\t- when /[^'\\\\]+/ tag \"string\" highlight \"string\"\n\t\t- when \"'\" tag \"squote\" highlight \"string\" pop\n\n}\n\ngrammar {\n\n\t[string] => ( $0 )\n\t\t| singleQuoteString\n\t\t| doubleQuoteString\n\n\t[doubleQuoteString]\n\t\t| $dquote stringInner $dquote => ( $1 )\n\t\t| $dquote $dquote => ( '' )\n\n\t[singleQuoteString]\n\t\t| $squote stringInner $squote => ( $1 )\n\t\t| $squote $squote => ( '' )\n\n\t[stringInner]\n\t\t| stringEscape => ( $0 )\n\t\t| $string => ( $0.value )\n\t\t| stringInner stringEscape => ( $0 + $1 )\n\t\t| stringInner $string => ( $0 + $1.value )\n\n\t[stringEscape]\n\t\t| $escaped => ( JSON.parse('\"' + $0.value + '\"') )\n\t\t| $quoteEscape => ( $0.value[1] )\n\n}\n","whitespace":"lexer {\n\n\t[whitespace]\n\t\t- when /\\s+/ tag \"whitespace\"\n\n}\n\ngrammar {\n\n\t[_]\n\t\t| $whitespace* => ( null )\n\n\t[__]\n\t\t| $whitespace+ => ( null )\n\n}\n"}