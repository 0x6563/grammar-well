{"grammar":{"rules":[{"name":"json$subexpression$1","symbols":["object"]},{"name":"json$subexpression$1","symbols":["array"]},{"name":"json","symbols":["_","json$subexpression$1","_"]},{"name":"object","symbols":[{"literal":"{"},"_",{"literal":"}"}]},{"name":"object$ebnf$1","symbols":[]},{"name":"object$ebnf$1$subexpression$1","symbols":["_",{"literal":","},"_","pair"]},{"name":"object$ebnf$1","symbols":["object$ebnf$1","object$ebnf$1$subexpression$1"],"postprocess":{"builtin":"arrpush"}},{"name":"object","symbols":[{"literal":"{"},"_","pair","object$ebnf$1","_",{"literal":"}"}]},{"name":"array","symbols":[{"literal":"["},"_",{"literal":"]"}]},{"name":"array$ebnf$1","symbols":[]},{"name":"array$ebnf$1$subexpression$1","symbols":["_",{"literal":","},"_","value"]},{"name":"array$ebnf$1","symbols":["array$ebnf$1","array$ebnf$1$subexpression$1"],"postprocess":{"builtin":"arrpush"}},{"name":"array","symbols":[{"literal":"["},"_","value","array$ebnf$1","_",{"literal":"]"}]},{"name":"value","symbols":["object"]},{"name":"value","symbols":["array"]},{"name":"value","symbols":["number"]},{"name":"value","symbols":["string"]},{"name":"value","symbols":[{"literal":"true"}]},{"name":"value","symbols":[{"literal":"false"}]},{"name":"value","symbols":[{"literal":"null"}]},{"name":"number","symbols":[{"token":"(lexer.has(\"number\") ? {type: \"number\"} : number)"}]},{"name":"string","symbols":[{"token":"(lexer.has(\"string\") ? {type: \"string\"} : string)"}]},{"name":"pair","symbols":["key","_",{"literal":":"},"_","value"]},{"name":"key","symbols":["string"]},{"name":"_","symbols":[]},{"name":"_","symbols":[{"token":"(lexer.has(\"space\") ? {type: \"space\"} : space)"}]}],"head":[],"body":["\n\nconst moo = require('moo')\n\nlet lexer = moo.compile({\n    space: {match: /\\s+/, lineBreaks: true},\n    number: /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\\b/,\n    string: /\"(?:\\\\[\"bfnrt\\/\\\\]|\\\\u[a-fA-F0-9]{4}|[^\"\\\\])*\"/,\n    '{': '{',\n    '}': '}',\n    '[': '[',\n    ']': ']',\n    ',': ',',\n    ':': ':',\n    true: 'true',\n    false: 'false',\n    null: 'null',\n})\n\n","\n\nfunction extractPair(kv, output) {\n    if(kv[0]) { output[kv[0]] = kv[1]; }\n}\n\nfunction extractObject(d) {\n    let output = {};\n\n    extractPair(d[2], output);\n\n    for (let i in d[3]) {\n        extractPair(d[3][i][3], output);\n    }\n\n    return output;\n}\n\nfunction extractArray(d) {\n    let output = [d[2]];\n\n    for (let i in d[3]) {\n        output.push(d[3][i][3]);\n    }\n\n    return output;\n}\n\n"],"customTokens":["number","string","space"],"config":{"lexer":"lexer"},"macros":{},"start":"json","version":"unknown"},"exportName":"grammar"}