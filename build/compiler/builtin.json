{ "json": "import * from whitespace;\r\n\r\nlexer: {{\r\n    start: \"json\"\r\n\r\n    json ->\r\n        - import: whitespace\r\n        - when: /-?(?:[0-9]|[1-9][0-9]+)(?:\\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\\b/ tag: \"number\"\r\n        - when: /\"(?:\\\\[\"bfnrt\\/\\\\]|\\\\u[a-fA-F0-9]{4}|[^\"\\\\])*\"/ tag: \"string\"\r\n        - when: \"{\" tag: \"{\"\r\n        - when: \"}\" tag: \"}\"\r\n        - when: \"[\" tag: \"[\"\r\n        - when: \"]\" tag: \"]\"\r\n        - when: \",\" tag: \",\"\r\n        - when: \":\" tag: \":\"\r\n        - when: \"true\" tag: \"true\"\r\n        - when: \"false\" tag: \"false\"\r\n        - when: \"null\" tag: \"null\"\r\n}}\r\n\r\ngrammar: {{\r\n    json -> _ (object | array) _ : {{ $1[0] }}\r\n\r\n    object -> \"{\" _ \"}\" : {{ {} }}\r\n        | \"{\" _ pair (_ \",\" _ pair)* _ \"}\" : ${ extractObject }\r\n\r\n    array -> \"[\" _ \"]\" : {{ [] }}\r\n        | \"[\" _ value (_ \",\" _ value)* _ \"]\" : ${ extractArray }\r\n\r\n    value : {{ $0 }} ->\r\n        object\r\n        | array\r\n        | number\r\n        | string\r\n        | \"true\" : {{ true }}\r\n        | \"false\" : {{ false }}\r\n        | \"null\" : {{ null }}\r\n\r\n    number -> $number : {{ parseFloat($0.value) }}\r\n\r\n    string -> $string : {{ JSON.parse($0.value) }}\r\n\r\n    pair -> key:k _ \":\" _ value:v : {{ [$k, $v] }}\r\n\r\n    key -> string : {{ $0 }}\r\n}}\r\n\r\nhead: ${\r\n    function extractPair(kv, output) {\r\n        if(kv[0]) { output[kv[0]] = kv[1]; }\r\n    }\r\n\r\n    function extractObject({data}) {\r\n        let output = {};\r\n\r\n        extractPair(data[2], output);\r\n\r\n        for (let i in data[3]) {\r\n            extractPair(data[3][i][3], output);\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    function extractArray({data}) {\r\n        let output = [data[2]];\r\n\r\n        for (let i in data[3]) {\r\n            output.push(data[3][i][3]);\r\n        }\r\n\r\n        return output;\r\n    }\r\n}\r\n", "number": "grammar: {{\r\n\r\n    unsigned_int -> \r\n        /[0-9]/+ : {{ parseInt($0.join(\"\")) }}\r\n\r\n    int -> \r\n        (\"-\"|\"+\")? /[0-9]/+ : {{ $0 ? parseInt($0[0]+$1.join(\"\")) : parseInt($1.join(\"\")) }}\r\n\r\n    unsigned_decimal -> \r\n        /[0-9]/+ (\".\" /[0-9]/+)? : {{ parseFloat($0.join(\"\") + ($1 ? \".\"+$1[1].join(\"\") : \"\")) }}\r\n\r\n    decimal -> \r\n        \"-\"? /[0-9]/+ (\".\" /[0-9]/+)? : {{ parseFloat( ($0 || \"\") + $1.join(\"\") +($2 ? \".\"+$2[1].join(\"\") : \"\")) }}\r\n\r\n    percentage -> \r\n        decimal \"%\" : {{ $0/100 }}\r\n        \r\n    jsonfloat -> \r\n        \"-\"? /[0-9]/+ (\".\" /[0-9]/+)? (/[eE]/ /[+-]/? /[0-9]/+)? : {{ parseFloat( ($0 || \"\") + $1.join(\"\") + ($2 ? \".\"+$2[1].join(\"\") : \"\") + ($3 ? \"e\" + ($3[1] || \"+\") + $3[2].join(\"\") : \"\")) }}\r\n}}", "string": "lexer: {{\r\n    string ->\r\n        - import: singleQuoteString, doubleQuoteString\r\n\r\n    doubleQuoteString ->\r\n        - when: /\"/ tag: \"dquote\" highlight:\"string\" goto: doubleQuoteStringEnd \r\n\r\n    singleQuoteString ->\r\n        - when: /'/ tag: \"squote\" highlight:\"string\" goto: singleQuoteStringEnd \r\n\r\n    doubleQuoteStringEnd ->\r\n        - when: /\\\\[\\\\\\/bnrft]/ tag: \"escaped\" highlight:\"constant\"\r\n        - when: /\\\\\"/ tag: \"quoteEscape\"\r\n        - when: /\\\\u[A-Fa-f\\d]{4}/ tag: \"escaped\" highlight:\"constant\"\r\n        - when: /\\\\./ tag:\"badEscape\"\r\n        - when: /[^\"\\\\]+/ tag: \"string\" highlight:\"string\"\r\n        - when: \"\\\"\" tag: \"dquote\" highlight:\"string\" pop\r\n\r\n    singleQuoteStringEnd ->\r\n        - when: /\\\\[\\\\\\/bnrft]/ tag: \"escaped\"\r\n        - when: /\\\\'/ tag: \"quoteEscape\"\r\n        - when: /\\\\u[A-Fa-f\\d]{4}/ tag: \"escaped\" \r\n        - when: /\\\\./ tag:\"badEscape\"\r\n        - when: /[^'\\\\]+/ tag: \"string\" highlight:\"string\"\r\n        - when: \"'\" tag: \"squote\" highlight:\"string\" pop\r\n}}\r\n\r\ngrammar: {{\r\n    string : {{ $0 }} \r\n        -> singleQuoteString \r\n        | doubleQuoteString \r\n\r\n    doubleQuoteString \r\n        -> $dquote stringInner $dquote : {{ $1 }}\r\n        | $dquote $dquote : {{ '' }}\r\n    \r\n    singleQuoteString \r\n        -> $squote stringInner $squote : {{ $1 }}\r\n        | $squote $squote : {{ '' }}\r\n\r\n    stringInner -> stringEscape : {{ $0 }}\r\n        | $string : {{  $0.value }}\r\n        | stringInner stringEscape : {{ $0 + $1 }}\r\n        | stringInner $string : {{ $0 + $1.value }}\r\n    \r\n    stringEscape -> $escaped : {{  JSON.parse('\"' +$0.value + '\"') }}\r\n        | $quoteEscape : {{ $0.value[1] }}\r\n}}", "whitespace": "lexer: {{\r\n    start: \"whitespace\"\r\n    whitespace ->\r\n        - when: /\\s+/ tag: \"whitespace\" \r\n}}\r\n\r\ngrammar: {{\r\n    _  -> $whitespace* : {{ null }}\r\n    __ -> $whitespace+ : {{ null }}\r\n}}" }
