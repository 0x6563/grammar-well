{ "grammar": { "rules": [{ "name": "unsigned_int$ebnf$1", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "unsigned_int$ebnf$1", "symbols": ["unsigned_int$ebnf$1", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "unsigned_int", "symbols": ["unsigned_int$ebnf$1"], "postprocess": "\n    function(d) {\n        return parseInt(d[0].join(\"\"));\n    }\n" }, { "name": "int$ebnf$1$subexpression$1", "symbols": [{ "literal": "-" }] }, { "name": "int$ebnf$1$subexpression$1", "symbols": [{ "literal": "+" }] }, { "name": "int$ebnf$1", "symbols": ["int$ebnf$1$subexpression$1"], "postprocess": { "builtin": "id" } }, { "name": "int$ebnf$1", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "int$ebnf$2", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "int$ebnf$2", "symbols": ["int$ebnf$2", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "int", "symbols": ["int$ebnf$1", "int$ebnf$2"], "postprocess": "\n    function(d) {\n        if (d[0]) {\n            return parseInt(d[0][0]+d[1].join(\"\"));\n        } else {\n            return parseInt(d[1].join(\"\"));\n        }\n    }\n" }, { "name": "unsigned_decimal$ebnf$1", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "unsigned_decimal$ebnf$1", "symbols": ["unsigned_decimal$ebnf$1", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "unsigned_decimal$ebnf$2$subexpression$1$ebnf$1", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "unsigned_decimal$ebnf$2$subexpression$1$ebnf$1", "symbols": ["unsigned_decimal$ebnf$2$subexpression$1$ebnf$1", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "unsigned_decimal$ebnf$2$subexpression$1", "symbols": [{ "literal": "." }, "unsigned_decimal$ebnf$2$subexpression$1$ebnf$1"] }, { "name": "unsigned_decimal$ebnf$2", "symbols": ["unsigned_decimal$ebnf$2$subexpression$1"], "postprocess": { "builtin": "id" } }, { "name": "unsigned_decimal$ebnf$2", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "unsigned_decimal", "symbols": ["unsigned_decimal$ebnf$1", "unsigned_decimal$ebnf$2"], "postprocess": "\n    function(d) {\n        return parseFloat(\n            d[0].join(\"\") +\n            (d[1] ? \".\"+d[1][1].join(\"\") : \"\")\n        );\n    }\n" }, { "name": "decimal$ebnf$1", "symbols": [{ "literal": "-" }], "postprocess": { "builtin": "id" } }, { "name": "decimal$ebnf$1", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "decimal$ebnf$2", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "decimal$ebnf$2", "symbols": ["decimal$ebnf$2", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "decimal$ebnf$3$subexpression$1$ebnf$1", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "decimal$ebnf$3$subexpression$1$ebnf$1", "symbols": ["decimal$ebnf$3$subexpression$1$ebnf$1", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "decimal$ebnf$3$subexpression$1", "symbols": [{ "literal": "." }, "decimal$ebnf$3$subexpression$1$ebnf$1"] }, { "name": "decimal$ebnf$3", "symbols": ["decimal$ebnf$3$subexpression$1"], "postprocess": { "builtin": "id" } }, { "name": "decimal$ebnf$3", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "decimal", "symbols": ["decimal$ebnf$1", "decimal$ebnf$2", "decimal$ebnf$3"], "postprocess": "\n    function(d) {\n        return parseFloat(\n            (d[0] || \"\") +\n            d[1].join(\"\") +\n            (d[2] ? \".\"+d[2][1].join(\"\") : \"\")\n        );\n    }\n" }, { "name": "percentage", "symbols": ["decimal", { "literal": "%" }], "postprocess": "\n    function(d) {\n        return d[0]/100;\n    }\n" }, { "name": "jsonfloat$ebnf$1", "symbols": [{ "literal": "-" }], "postprocess": { "builtin": "id" } }, { "name": "jsonfloat$ebnf$1", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "jsonfloat$ebnf$2", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "jsonfloat$ebnf$2", "symbols": ["jsonfloat$ebnf$2", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "jsonfloat$ebnf$3$subexpression$1$ebnf$1", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "jsonfloat$ebnf$3$subexpression$1$ebnf$1", "symbols": ["jsonfloat$ebnf$3$subexpression$1$ebnf$1", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "jsonfloat$ebnf$3$subexpression$1", "symbols": [{ "literal": "." }, "jsonfloat$ebnf$3$subexpression$1$ebnf$1"] }, { "name": "jsonfloat$ebnf$3", "symbols": ["jsonfloat$ebnf$3$subexpression$1"], "postprocess": { "builtin": "id" } }, { "name": "jsonfloat$ebnf$3", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "jsonfloat$ebnf$4$subexpression$1$ebnf$1", "symbols": [{ "regex": { "source": "[+-]", "flags": "" } }], "postprocess": { "builtin": "id" } }, { "name": "jsonfloat$ebnf$4$subexpression$1$ebnf$1", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "jsonfloat$ebnf$4$subexpression$1$ebnf$2", "symbols": [{ "regex": { "source": "[0-9]", "flags": "" } }] }, { "name": "jsonfloat$ebnf$4$subexpression$1$ebnf$2", "symbols": ["jsonfloat$ebnf$4$subexpression$1$ebnf$2", { "regex": { "source": "[0-9]", "flags": "" } }], "postprocess": { "builtin": "arrpush" } }, { "name": "jsonfloat$ebnf$4$subexpression$1", "symbols": [{ "regex": { "source": "[eE]", "flags": "" } }, "jsonfloat$ebnf$4$subexpression$1$ebnf$1", "jsonfloat$ebnf$4$subexpression$1$ebnf$2"] }, { "name": "jsonfloat$ebnf$4", "symbols": ["jsonfloat$ebnf$4$subexpression$1"], "postprocess": { "builtin": "id" } }, { "name": "jsonfloat$ebnf$4", "symbols": [], "postprocess": { "builtin": "nuller" } }, { "name": "jsonfloat", "symbols": ["jsonfloat$ebnf$1", "jsonfloat$ebnf$2", "jsonfloat$ebnf$3", "jsonfloat$ebnf$4"], "postprocess": "\n    function(d) {\n        return parseFloat(\n            (d[0] || \"\") +\n            d[1].join(\"\") +\n            (d[2] ? \".\"+d[2][1].join(\"\") : \"\") +\n            (d[3] ? \"e\" + (d[3][1] || \"+\") + d[3][2].join(\"\") : \"\")\n        );\n    }\n" }], "body": [], "customTokens": [], "config": {}, "macros": {}, "start": "unsigned_int", "version": "unknown" }, "exportName": "grammar" }
