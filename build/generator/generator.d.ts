import { ASTDirectives, GeneratorContext, GeneratorOptions, GeneratorTemplateFormat } from "../typings/index.js";
import { GeneratorState } from "./state.js";
import { ExportsRegistry } from "./stringify/exports/registry.js";
import { JavaScriptGenerator } from "./stringify/javascript.js";
export declare function Generate(rules: string | ASTDirectives | (ASTDirectives[]), config?: GeneratorOptions): Promise<string>;
export declare class Generator {
    private config;
    private aliasPrefix;
    private context;
    state: GeneratorState;
    generator: JavaScriptGenerator;
    constructor(config?: GeneratorOptions, context?: GeneratorContext, aliasPrefix?: string);
    import(source: string): Promise<void>;
    import(directive: ASTDirectives): Promise<void>;
    import(directives: ASTDirectives[]): Promise<void>;
    export<T extends GeneratorTemplateFormat = '_default'>(format: any, name?: string): ReturnType<typeof ExportsRegistry[T]>;
    private processImportDirective;
    private processConfigDirective;
    private processLexerDirective;
    private importLexerStates;
    private importLexerState;
    private buildLexerStructuredStates;
    private processGrammarDirective;
    private importBuiltIn;
    private importGrammar;
    private mergeLanguageDefinitionString;
    private buildRules;
    private buildRule;
    private buildSymbol;
    private buildCharacterRules;
    private buildSubExpressionRules;
    private buildRepeatRules;
}
